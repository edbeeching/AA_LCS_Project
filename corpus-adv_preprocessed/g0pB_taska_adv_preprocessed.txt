inheritance is a basic concept in object oriented programming. it models the reuse of existing class code in new classes  the is a kind of relationship.
for example, a house is a kind of building similarly, an office block is a kind of building. both house and office block will inherit certain characteristics from buildings, but also have their own personal characteristics  a house may have a number of occupants, whereas an office block will have a number of offices. however, these personal characteristics dont apply to all types of buildings.
in this example, the building would be considered the superclass  it contains general characteristics for other objects to inherit  and the house and office block are both subclasses  they are specific types and specialise the characteristics of the superclass.
java allows object inheritance. when one class inherits from another class, all the public variables and methods are available to the subclass.
public class shape {
 private color colour
 public void setcolourcolor newcolour{
  colour = newcolour
 }
}
public class circle extends shape {
 private int radius
 public void setradiusint newradius{
  radius = newradius
 }
}
in this example, the circle class is a subclass of the shape class. the shape class provides a public setcolour method, which will be available to the circle class and other subclasses of shape. however, the private variable colour as defined in the shape class will not be available for direct manipulation by the circle class because it is not inherited. the circle class specialises the shape class, which means that setradius is available to the circle class and all subclasses of circle, but it isnt available to the superclass shape. 
