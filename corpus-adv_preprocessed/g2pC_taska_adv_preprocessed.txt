inheritance is a way to form new classes instances of which are called objects using classes that have already been defined. the new classes, known as derived classes, take over or inherit attributes and behavior of the pre existing classes, which are referred to as base classes or ancestor classes. it is intended to help reuse existing code with little or no modification.
an advantage of inheritance is that modules with sufficiently similar interfaces can share a lot of code, reducing the complexity of the program. inheritance therefore has another view, a dual, called polymorphism, which describes many pieces of code being controlled by shared control code.
inheritance is typically accomplished either by overriding replacing one or more methods exposed by ancestor, or by adding new methods to those exposed by an ancestor.
in defining this inheritance hierarchy we have already defined certain restrictions, not all of which are desirable. singleness: using single inheritance, a subclass can inherit from only one superclass. visibility: whenever client code has access to an object, it generally has access to all the objects superclass data. static: the inheritance hierarchy of an object is fixed at instantiation when the objects type is selected and does not change with time.
