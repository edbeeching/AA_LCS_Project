Algorithms
LCS
Dynamic Programming
The dynamic programming algorithm for computing the LCS between two input texts (X, Y, with lengths m, n, respectively) is found as follows (adapted from Amaury Habrard’s slides):
Optimal Substructure: 
1. For an LCS Z = <z1,…,zk>, if xm = yn, then xm = yn = zk, and Zk-1 is the LCS of Xm-1 and Yn-1
2. If xm != yn, then zk != xm implies Z is LCS of Xm-1 and Yn
3. If xm != yn, then zk != yn implies Z is LCS of Xm and Yn-1

Recursive Solution: 
1. c[i,j] = 0 if i = 0 		or j = 0
2. c[i,j] = c[i-1,j-1] + 1 		if i,j > 0 and xi = yj
3. c[i,j] = max(c[i-1,j],c[i,j-1]) 	if i,j > 0 and xi ? yj

LCS-Length Algorithm(input: X,Y):
1. m = X.length
2. n = Y.length
3. b[1..m,1..n], c[0..m,0..n]
4. for i in 1..m
5.     	c[i,0] = 0
6. for j in 0..n
7. 	c[0,j] = 0
8. for i in1..m
9. 		for j in 1..n
10. 		if xi == yj
11. 			c[i,j] = c[i-1,j-1] + 1
12. 			b[i,j] = “d”  #for diagonal
13. 		else if c[i-1,j] >= c[i,j-1]
14. 			c[i,j] = c[i-1,j]
15. 			b[i,j] = “u”  #for up
16. 		else 
17. 			c[i,j] = c[i,j-1]
18. 			b[i,j] = “l”  #for left
19. return c and b

Algorithm for building LCS from b matrix Print-LCS(input: b, X, X.length, Y.length):
1. if i == 0 or j == 0
2. 	return
3. if b[i,j] == “d”
4. 	Print-LCS(b,X,i-1,j-1)
5. elseif b[i,j] == “u”
6. 	Print-LCS(b,X,i-1,j)
7. else 
8. 	Print-LCS(b,X,i,j-1)


LCS Linear Space Forwards: The following algorithm finds the length of the LCS of two input strings using dynamic programming with linear space complexity.

LCS_LSF (input: X,Y):
1. m = X.length
2. n = Y.length
3. c[1..2,1..n]
4. col = []  	#for use in divide and conquer alg (see next section)
5. for i in 1..m
6. 		c[1,0] = 0
7. 		for j in 1..n
8. 			if xi == yj
9. 				c[1,j] = c[0,j-1] + 1
10. 		else if c[1,j-1] > c[0,j]
11. 			c[1,j] = c[1,j-1]
12. 		else
13. 			c[1,j] = c[0,j]
14. 	c[0,:] = c[1,:]
15. 	col.append(c[1,n])
16. return c[1,length_Y] , col   #return length of LCS, column

LCS Linear Space Backwards: The following algorithm is a linear space implementation of the LCS dynamic programming algorithm, except it starts at the end of texts and works towards the beginning.

LCS_LSB(input: X,Y):
1. m = X.length
2. n = Y.length
3. c[1..2,1..n]
4. col = []   	#for use in divide and conquer alg (see next section)
5. for i in m-1..0
6. 		for j in n-1..0
7. 			if X[i+1]==Y[j+1]
8. 				c[1,j] = c[0,j+1]+1
9. 			else if c[1,j+1]>c[0,j]
10. 			c[1,j] = c[1,j+1]
11. 		else 
12. 			c[1,j] = c[0,j]
13. 	c[0,:] = c[1,:]
14. 	col.insert(0,c[1,0])
15. return c[1,0], col  #return length of LCS, column

LCS Divide and Conquer:  The following algorithm uses the LCS linear space forward and backward algorithms to compute the LCS of two input spaces in linear space, with the functionality to return the actual LCS (not just the length).
The algorithm is based on the following 2 properties:
1. The size of the LCS that passes through entry (i,j) is sum of the LCS from (0,0) to (i,j) (denoted c[i,j])and the LCS from (i,j) to (m,n) (denoted g[i,j])
2. Let k be any number from 0 to n, let q be the number that maximizes c[q,k] + g[q,k]. There is an optimal solution to the LCS problem (from 0,0 to m,n) that passes through q,k
Combining these properties and the linear space algorithms presented above, we can formulate a divide and conquer algorithm that requires linear space.
LCS_DC(input: X,Y): 
1. m = X.length
2. n = Y.length
3. if m*n == 0
4. 		return []  	#if one of the texts is empty, return an empty LCS
5. elseif m <= 2 or n <= 2    
6. 		return LCS_DyProg(X,Y)   #if one of the texts is small, can do normal Dynamic Prog 
7. else
8. 		breakpt = floor(n / 2)
9. 		length, c = LCS_LSF(X, Y[0:breakpt])
10. 	length2, c2 = LCSLSB(X, Y[breakpt:n])
11. 	q = maxindex(c, c2)    	#q is the index that maximizes (c[q] + c2[q])
12. 	LCSL = LCS_DC(X[0..q],Y[0..breakpt])
13. 	LCSR = LCS_DC(X[q+1,m],Y[breakpt+1,n])
14. 	return LCSL + LCSR   	#return concatenation of sub LCS

LCS Recursive: The recursive algorithm for finding the LCS is a depth first search through the search space, enumerating all possible solutions and returning the largest LCS found.
LCS_Recursive(input: X, Y):
1. m = X.length
2. n = Y.length
3. if X[m] == Y[n]
4. 		return LCS_Recursive(X[0:m-1], Y[0:n-1])
5. else
6. 		LCS1 = LCS_Recursive(X[0:m-1], Y[0:n])
7.		LCS2 = LCS_Recursive(X[0:m], Y[0:n-1])
8. 		if LCS1.length > LCS2.length	
9. 			return LCS1
10.		else
11. 		return LCS2

LCS Branch and Bound: 



Printing Neatly
Greedy Solution: The greedy solution simply prints as many words as possible on a line before going to the next. The solution it gives is not guarenteed to be optimal.
PN_Greedy(input: X (list of words to be printed), L (number of spaces per line)):
1. lines = []
2. currentLine = []
3. currentLineSpace = 0
4. for i in X
5. 		if currentLineSpace + (X[i].length + 1) =< L
6.			currentLineSpace += X[i].length + 1   #update space taken on current line (1 for space between words)
7. 			currentLine += " " + X[i]
8. 		else
9. 			lines.append(currentLine)
10.			currentLineSpace = X[i].length
11.			currentLine = X[i]
12. lines.append(currentLine)
13. return lines

Dynamic Programming: The dynamic programming approach computes an optimal solution in polynomial time. 
First, we define extras[i,j] to be the number of extra spaces on a line containing words i through j. Using this, we can compute the cost of a line containing the same words:
1. lc[i,j] = infinity 			if extras[i,j] < 0   (if words do not fit on the line)
2. lc[i,j] = 0    				if j = n and extras[i,j] >= 0   (if it is the last line and the words fit)
3. lc[i,j] = (extras[i,j])^3 	otherwise
Using this, we can compute the optimal arrangement (minimal cost) of words 1..j = c[j] :
1. c[j] = 0 								if j = 0
2. c[j] = min(1<=i<=j)(c[i-1] + lc[i,j])   	if j>0

PN_DP(input: X, L)
1. Compute extras[i, j] 1 = i, j = n
2. Compute lc[i, j] 1 = i, j = n
3. c[0] = 0
4. for j in 1..n
5. 		c[j] = min(1<=i<=j)(c[i-1] + lc[i,j]) 
6. 		p[j] = k s.t. min(1<=i<=j)(c[i-1] + lc[i,j]) = c[k-1] + lc[k,j]    #store where the cuts are
7. return p

Recursive: The recursive solution iterates through all the possible sequences and returns the optimal score and solution.
PN_Recursive(input: X, L):
1. result = []  	#where the lines will be stored
2. max_words = the maximum number of words that can fit on current line (what the greedy solution would return)
3. if max_words >= X.length
4. 		return 0, X[0:X.length]  	#base case: where all words inputed will fit on current line
5. best_score = infinity
6. for i in 1..max_words
7. 		subscore = 0        	#current line space taken
8. 		for j in 0..i-1
9. 			subscore += X[j].length + 1	#add current word and space
10. 	subscore -= 1  					#remove last space
11. 	subscore = (L - subscore )^3 	#compute cost of space left over
12.		score, res = PN_Recursive(X[i:n], L)
13. 	if score + subscore < best_score
14. 		result.append(X[0..i])
15.			result += res
16. return best_score, result



